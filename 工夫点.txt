工夫点

・クラスごとのデータと全データの相関係数を画面表示させた
出力結果の一部
----- correlationCoefficient -----
Class.0: r=-0.182613
Class.1: r=0.0205726
All data: r=0.794333

・分類結果の確信度を計算し、画面表示させた
出力結果の一部
TestData.0: [-0.962073, -1.49651]
minIndex: 35, 
Class -> 0, Confidence:100%

※上記のConfidenceが確信度

・kNNのkが任意の自然数に対応するようにした
#define Hyperparameter 1

・ユークリッド距離が短い順にkNNで参照したトレインデータを画面表示させた
出力結果の一部
TestData.23: [-1.17193, -1.06581]
minIndex: 41, 9, 39, 27, 0, 19, 28, 
Class -> 0, Confidence:100%

※上記のminIndexが参照したトレインデータ番号

・クラス分類後の各クラスのテストデータ数を画面表示させた
----- number of data -----
Class.0 data: 25
Class.1 data: 25

・main関数内の処理を関数化し、関数用のファイルを作成した
++++before++++
int main(void){
  /*------ここからデータの読み取り------*/
  VectorArray trainData;
  Vector trainCorrect = read_data("2d2c-train.plot", trainData); //easy-train.plot → 2d2c-train.plot
  VectorArray tmp_testData;
  Vector testCorrect = read_dataWithoutLabel("2d2c-test.data", tmp_testData); //easy-test.data → 2d2c-test.data
  /*------ここまでデータの読み取り------*/

  //(読み込んだデータの画面表示)
  std::cout << "Training-Data:" << std::endl;
  for(int x=0; x<trainData.rows(); x++){
    std::cout << "Train." << x << ": "
	      << "[" << trainData[x][0] << ", " << trainData[x][1] << "]\n";
  }
  std::cout << std::endl;
  std::cout << "Test-Data:" << std::endl;
  for(int y=0; y<tmp_testData.rows(); y++){
    std::cout << "Test." << y << ": "
	      << "[" << tmp_testData[y][0] << ", " << tmp_testData[y][1] << "]\n";
  }
  std::cout << std::endl;

  //テストデータの識別結果を保存するための配列
  Vector testLabel(tmp_testData.rows());

  for(int i=0; i<tmp_testData.rows(); i++){
    //注目しているテストデータを格納するためのインスタンス
    Vector testData = tmp_testData[i];

    //各トレーニングデータとの距離を格納するための配列
    Vector distance(trainData.rows());
    
    //各トレーニングデータとの距離を計算
    for(int j=0; j<trainData.rows(); j++){
      distance[j] = (testData[0]-trainData[j][0])*(testData[0]-trainData[j][0]) + (testData[1]-trainData[j][1])*(testData[1]-trainData[j][1]);
    }
    
    //最小の非類似度の値を保持するための変数
    double minDist = pow(10,300); //10の300乗
    //最小の非類似度を示すトレーニングデータが何番目なのかを記録するための変数
    int minIndex;
    
    //最近傍のトレーニングデータを探索
    for(int j=0; j<trainData.rows(); j++){
		if(j==0 || minDist > distance[j])
		{
			minDist = distance[j];
			minIndex = j;
		}
	}
    //テストデータのラベルを決定
    testLabel[i] = trainCorrect[minIndex];
    
    //問1確認用
    for(int x=0; x<trainData.rows(); x++){
      std::cout << "Train." << x << ": "
                << "[" << trainData[x][0] << ", " << trainData[x][1] << "]" << "\t";
      std::cout << "Distance:" << distance[x] << std::endl;
    }
    std::cout << std::endl;
    //問2確認用
    std::cout << "minIndex :" << minIndex << std::endl << std::endl;
    
  }
  //記録保存
  recordClassified(tmp_testData, testLabel);
  return 0;
}

++++after++++
int main(void){
	/*------ここからデータの読み取り------*/
	VectorArray trainData;
	Vector trainCorrect = read_data("2d2c-train.plot", trainData);
	VectorArray tmp_testData;
	Vector testCorrect = read_dataWithoutLabel("2d2c-test.data", tmp_testData);
	/*------ここまでデータの読み取り------*/

	//追加：kの定義
	int k = Hyperparameter;

	//(読み込んだデータの画面表示)
	printData(trainData, tmp_testData);
	//テストデータの識別結果を保存するための配列
	Vector testLabel(tmp_testData.rows());

	//追加：最小距離対象トレーニングデータ番号保存のための配列
	VectorArray minIndexArray(tmp_testData.rows(), k);
	//追加：最多ラベルの個数を保存するための配列
	Vector maxCount(tmp_testData.rows());

	//追加：k個探す
	for (int i=0; i<tmp_testData.rows(); i++)
		serchK(tmp_testData, trainData, trainCorrect, testLabel, minIndexArray, i, k, maxCount);
	//追加：結果を最後にまとめて表示
	printResult(tmp_testData, trainData, trainCorrect, minIndexArray, testLabel, k, maxCount);

	//記録保存
	recordClassified(tmp_testData, testLabel);

	return 0;
}