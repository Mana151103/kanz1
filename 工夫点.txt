工夫点

①ピアソンの積率相関係数を計算する関数を設け、画面表示させた
----- correlationCoefficient -----
Class.0: r=-0.182613
Class.1: r=0.0205726
All data: r=0.794333
↑クラスごとのデータと全データの相関係数を表示した

②分類結果の確信度を計算する関数を作成し、画面表示させた

③ユークリッド距離が短い順にkNNで参照したトレインデータを画面表示させた
TestData.23: [-1.17193, -1.06581]
minIndex: 41,
Class -> 0, Confidence:100%

TestData.24: [-0.761253, -0.59539]
minIndex: 26,
Class -> 0, Confidence:100%

TestData.25: [0.426538, 0.40993]
minIndex: 81,
Class -> 1, Confidence:100%

TestData.26: [0.408082, 1.49055]
minIndex: 77,
Class -> 1, Confidence:100%

TestData.27: [0.749138, -0.460587]
minIndex: 95,
Class -> 1, Confidence:100%
↑kNNにおける予測の信頼性を示した

④クラス分類結果の確信度とクラス分類後の各クラスのテストデータ数を画面表示させた
----- number of data -----
Class.0 data: 25
Class.1 data: 25

⑤main関数内の処理を関数化し、関数用のファイルを新たに作成して、main関数内の処理の流れを見やすくした（コードの可読性を上げた）

⑥kNNのkが任意の自然数に対応するようにした
#define Hyperparameter 1

--------各工夫点に対応するコード--------

①function.cxx内の7番目の関数

double correlationCoefficient(VectorArray& testData, Vector& testLabel, VectorArray& trainData, Vector& trainCorrect, int c){
	double r, Sxy, Sxx, Syy, xyAve = 0, xAve = 0, x2Ave = 0, yAve = 0, y2Ave = 0;
	int d = 0;

	//Sxy = xyAve - xAve*yAve
	//Sxx = x2Ave - (xAve)^2
	//Syy = y2Ave - (yAve)^2
	//r = Sxy / sqrt(Sxx*Syy)

	//↓変数の説明↓
	//xAve: xの平均
	//x2Ave: xの2乗の平均
	//yAve: yの平均
	//y2Ave: yの2乗の平均
	//xyAve: xyの平均
	//Sxx: xの分散
	//Syy: yの分散
	//Sxy: x,yの共分散
	//r: 相関係数
	//d: 該当するデータの数

	//↓引数の説明↓
	//testData: テストデータを格納しているVectorArray
	//testLabel: テストデータのクラスを格納しているVector
	//trainData: 教師データ(トレインデータ)を格納しているVectorArray
	//trainCorrect: 教師データ(トレインデータ)のクラスを格納しているVector
	//c: int型の参照するクラスのデータのクラス識別番号(c=-1のときに全データを参照する)

	for(int i=0;i<testData.rows();i++){
		if(testLabel[i]==c || c==-1){
		xAve += testData[i][0];
		x2Ave += testData[i][0] * testData[i][0];
		yAve += testData[i][1];
		y2Ave += testData[i][1] * testData[i][1];
		xyAve += testData[i][0] * testData[i][1];
		d++;
		}
	}
	for(int i=0;i<trainData.rows();i++){
		if(trainCorrect[i]==c || c==-1){
		xAve += trainData[i][0];
		x2Ave += trainData[i][0] * trainData[i][0];
		yAve += trainData[i][1];
		y2Ave += trainData[i][1] * trainData[i][1];
		xyAve += trainData[i][0] * trainData[i][1];
		d++;
		}
	}
	if(d!=0){
		xAve /= double(d);
		x2Ave /= double(d);
		yAve /= double(d);
		y2Ave /= double(d);
		xyAve /= double(d);
		Sxy = xyAve - xAve*yAve;
		Sxx= x2Ave - xAve*xAve;
		Syy= y2Ave - yAve*yAve;
		r = Sxy / sqrt(Sxx*Syy);
	}
	else{
		r=0;
	}

	return r;
}

②function.cxx内の最後の関数printResult内でConfidenceとして画面出力している。計算にあたり関数countLabelsで求められるmaxCountを使用。（確信度＝分類されたクラスがk個中何個あるか/k*100 % ⇒Confidence=maxCount/k*100 %）

Vector countLabels(Vector& trainCorrect, Vector& index, int k, int numLabels){
	Vector labelCount(numLabels);
    for (int m = 0; m < k; ++m) {
        int trainIndex = static_cast<int>(index[m]);
        int label = static_cast<int>(trainCorrect[trainIndex]);
        labelCount[label]++;
    }
    return labelCount;
}

③function.cxx内の最後の関数printResultで全ての結果を表示。
void printResult(VectorArray& tmp_testD, VectorArray& trainD, Vector& trainCorrect, VectorArray& minIndexArray, Vector& testLabel, int k, Vector& maxCount){
	//追加：結果を最後にまとめて表示
	std::cout << "----- Result -----" << std::endl;
	//追加：各ラベルのデータ数
	int class0Number = 0, class1Number = 0;

	for (int i=0; i<tmp_testD.rows(); i++){
		double confidence = static_cast<double>(maxCount[i]) / k;

		std::cout << "TestData." << i << ": [" << tmp_testD[i][0] << ", " << tmp_testD[i][1] << "]" << std::endl;
		std::cout << "minIndex: ";
		for (int r=0; r<minIndexArray[i].size(); r++){
			std::cout << minIndexArray[i][r] << ", ";
		}
		std::cout << std::endl;
		std::cout << "Class -> " << testLabel[i] << ", Confidence:" << confidence * 100 << "%" << std::endl;
		std::cout << std::endl;
		if (testLabel[i] == 0){
			class0Number++;
		}
		else if (testLabel[i] == 1){
			class1Number++;
		}
	}

	//追加：各ラベルの個数表示
	std::cout << "----- number of data -----" << std::endl;
	std::cout << "Class.0 data: " << class0Number << std::endl;
	std::cout << "Class.1 data: " << class1Number << std::endl;

	//追加：相関係数の表示
	std::cout << std::endl;
	std::cout << "----- correlationCoefficient -----" << std::endl;
	std::cout << "Class.0: r=" << correlationCoefficient(tmp_testD, testLabel, trainD, trainCorrect, 0) << std::endl;
	std::cout << "Class.1: r=" << correlationCoefficient(tmp_testD, testLabel, trainD, trainCorrect, 1) << std::endl;
	std::cout << "All data: r=" << correlationCoefficient(tmp_testD, testLabel, trainD, trainCorrect, -1) << std::endl;
	std::cout << std::endl;
}

④main関数ファイルを簡潔化するにあたり、関数宣言はすべてreadData.hに格納。
int main(void){
	/*------ここからデータの読み取り------*/
	VectorArray trainData;
	Vector trainCorrect = read_data("2d2c-train.plot", trainData);
	VectorArray tmp_testData;
	Vector testCorrect = read_dataWithoutLabel("2d2c-test.data", tmp_testData);
	/*------ここまでデータの読み取り------*/

	//追加：kの定義
	int k = Hyperparameter;

	//(読み込んだデータの画面表示)
	printData(trainData, tmp_testData);
	//テストデータの識別結果を保存するための配列
	Vector testLabel(tmp_testData.rows());

	//追加：最小距離対象トレーニングデータ番号保存のための配列
	VectorArray minIndexArray(tmp_testData.rows(), k);
	//追加：最多ラベルの個数を保存するための配列
	Vector maxCount(tmp_testData.rows());

	//追加：k個探す
	for (int i=0; i<tmp_testData.rows(); i++){
		serchK(tmp_testData, trainData, trainCorrect, testLabel, minIndexArray, i, k, maxCount);
	}
	//追加：結果を最後にまとめて表示
	printResult(tmp_testData, trainData, trainCorrect, minIndexArray, testLabel, k, maxCount);

	//記録保存
	recordClassified(tmp_testData, testLabel);
	return 0;
}

・readData.h
#include<iostream>
#include<iomanip>
#include<fstream>
#include<sstream>
#include<cstdlib>
#include<cmath>
#include<vector>
#include<climits>
#include<string>
#include<cfloat>
#include<random>
#include<algorithm>
#include<sys/stat.h>
#include<map>
#include<filesystem>
#include"vectorArray.h"

#ifndef __READDATA__
#define __READDATA__

//追加：kの値
#define Hyperparameter 1

VectorArray readTestData(const std::string &file, int dim);
Vector readTestCorrect(const std::string &file);

void recordClassified(const VectorArray &data, const Vector &label);

Vector read_data(const std::string &fileName, VectorArray &data);
Vector read_dataWithoutLabel(const std::string &fileName, VectorArray &data);
void read_data2(const std::string &fileName, VectorArray &data, Vector &label, int dimension);
void read_data3(const std::string &fileName, VectorArray &data, Vector &label);

//追加：mainファイルで使用している関数たち
void printData(VectorArray& trainData, VectorArray& tmp_testData);
void computeDistances(Vector& testData, VectorArray& trainData, Vector& distance, Vector& index);
void selectTopK(Vector& distance, Vector& index, int k);
Vector countLabels(Vector& trainCorrect, Vector& index, int k, int numLabels);
int getMajorityLabel(Vector& labelCount, Vector& maxCount, int i);
void serchK(VectorArray& tmp_testData, VectorArray& trainData, Vector& trainCorrect, Vector& testLabel, VectorArray& minIndexArray, int i,int k, Vector& maxCount);

void printResult(VectorArray& tmp_testD, VectorArray& trainD, Vector& trainCorrect, VectorArray& minIndexArray, Vector& testLabel, int k, Vector& maxCount);
double correlationCoefficient(VectorArray& testData, Vector& testLabel, VectorArray& trainData, Vector& trainCorrect, int c);

#endif

⑤readData.h内でkに格納する値を定義した
#define Hyperparameter 1